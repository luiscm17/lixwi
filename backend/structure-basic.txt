/backend/
├── app/
│   ├── agents/
│   │   └── agent_manager.py         # Gestión de agentes IA
│   ├── api/
│   │   ├── v1/
│   │   │   ├── endpoints/
│   │   │   │   ├── agent.py         # Endpoints de agentes
│   │   │   │   ├── chat.py          # Gestión de chat con session_id
│   │   │   │   ├── exercise.py      # Gestión de ejercicios
│   │   │   │   ├── upload.py        # Gestión de subida de imágenes
│   │   │   │   └── visualize.py     # Visualizaciones con matplotlib
│   │   │   ├── error_handlers.py    # Gestión centralizada de errores
│   │   │   └── schemas.py           # Modelos Pydantic compartidos
│   ├── core/
│   │   ├── config.py                # Configuración general (claves API)
│   │   ├── memory.py                # Memoria y contexto de usuario
│   │   ├── prompts.py               # Plantillas para LLM
│   │   └── logging_config.py        # Configuración de logs
│   ├── db/                          # Capa de base de datos
│   │   ├── base.py                  # Configuración del ORM
│   │   ├── session.py               # Manejo de sesiones DB
│   │   ├── models/                  # Modelos SQLAlchemy
│   │   │   ├── user.py
│   │   │   ├── chat_history.py
│   │   │   └── exercise.py
│   │   └── crud/                    # Operaciones CRUD
│   │       ├── user.py
│   │       ├── chat_history.py
│   │       └── exercise.py
│   ├── services/
│   │   ├── llm_service.py           # Integración con OpenAI
│   │   ├── embedding_service.py     # Gestión de embeddings
│   │   ├── exercise_generator.py    # Generador de ejercicios
│   │   ├── graph_service.py         # Generación de gráficos
│   │   └── image_processing.py      # Procesamiento de imágenes
│   ├── models/
│   │   └── chat.py                  # Modelos Pydantic
│   ├── utils/
│   │   └── validators.py            # Validaciones comunes
│   ├── plugins/
│   │   ├── graph_generator/
│   │   │   ├── skprompt.json        # Configuración del plugin
│   │   │   └── prompt.txt           # Prompt del LLM
│   │   └── exercise_creator/
│   │       ├── skprompt.json
│   │       └── prompt.txt
│   └── main.py                      # Aplicación FastAPI principal
├── tests/                           # Pruebas unitarias
│   ├── integration/                 # Pruebas de integración
│   └── unit/                       # Pruebas unitarias
├── requirements.txt                 # Dependencias
├── pyproject.toml                   # Configuración del proyecto
├── README.md                        # Documentación
└── .env                            # Variables de entorno

Características implementadas:
1. Sistema de agentes IA con plugins
2. Manejo de errores centralizado
3. Sistema de logging configurado
4. Manejo de sesiones en el chat
5. Validación de tipos de archivo
6. Generación de gráficos matemáticos
7. Base de datos con SQLAlchemy
8. Tests unitarios y de integración
9. Documentación Swagger
10. Sistema de plugins extensible

Tecnologías principales:
- FastAPI: Framework web
- SQLAlchemy: ORM para base de datos
- Pydantic: Validación de datos
- GitHub Models: Integración IA
- Matplotlib: Visualizaciones
- Python-dotenv: Variables de entorno
- Pytest: Testing

Explicación rápida de cada parte
api/v1/endpoints/:
Define las rutas, por ejemplo /chat, /upload, /visualize.

core/:
Configuración general, memoria y plantillas de prompts.

services/:
Lógica que se comunica con OpenAI, DB vectorial y generación de gráficas.

models/:
Defines las estructuras de datos (Pydantic models) que recibe o envía tu API.

utils/:
Cosas auxiliares como procesar imágenes.

main.py:
Archivo principal que crea la instancia de FastAPI y monta las rutas.

Flujo general
Usuario envía pregunta o imagen → POST /chat o POST /upload

FastAPI recibe → pasa a LangChain / Semantic Kernel o procesamiento interno

Consulta a LLM (GPT) o consulta la memoria/vector DB

Genera respuesta paso a paso + visualizaciones

Responde al usuario.

Tecnologías de soporte
FastAPI: framework de backend.

Uvicorn: servidor ASGI para correr FastAPI.

LangChain o Semantic Kernel: para orquestar memoria y prompts.

OpenAI SDK: para llamadas a GPT.

ChromaDB o FAISS: si usas búsqueda semántica.

Pydantic: validación de datos.

